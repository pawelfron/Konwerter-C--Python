//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//Mateusz//Documents//studia//kompilatory//Konwerter-C--Python//CGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Include=1, If=2, Else=3, For=4, While=5, Do=6, Continue=7, Break=8, Return=9, 
		Const=10, Struct=11, Char=12, Short=13, Int=14, Long=15, Float=16, Double=17, 
		Void=18, IncludeLiteral=19, Identifier=20, CharLiteral=21, StringLiteral=22, 
		IntLiteral=23, FloatLiteral=24, Access=25, AccessPointer=26, Address=27, 
		Assign=28, AssignAdd=29, AssignSubtract=30, AssignMultiply=31, AssignDivide=32, 
		AssignModulo=33, Add=34, Subtract=35, Multiply=36, Divide=37, Modulo=38, 
		Equal=39, NotEqual=40, Less=41, LessOrEqual=42, Greater=43, GreaterOrEqual=44, 
		And=45, Or=46, Not=47, LeftRound=48, RightRound=49, LeftSquare=50, RightSquare=51, 
		LeftCurly=52, RightCurly=53, Semicolon=54, Colon=55, Comma=56, Whitespace=57, 
		Comment=58;
	public const int
		RULE_program = 0, RULE_includeStatement = 1, RULE_declaration = 2, RULE_functionDeclaration = 3, 
		RULE_structDeclaration = 4, RULE_variableDeclaration = 5, RULE_statement = 6, 
		RULE_expression = 7, RULE_lvalue = 8, RULE_type = 9, RULE_assignOperator = 10;
	public static readonly string[] ruleNames = {
		"program", "includeStatement", "declaration", "functionDeclaration", "structDeclaration", 
		"variableDeclaration", "statement", "expression", "lvalue", "type", "assignOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#include'", "'if'", "'else'", "'for'", "'while'", "'do'", "'continue'", 
		"'break'", "'return'", "'const'", "'struct'", "'char'", "'short'", "'int'", 
		"'long'", "'float'", "'double'", "'void'", null, null, null, null, null, 
		null, "'.'", "'->'", "'&'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", 
		"'>='", "'&&'", "'||'", "'!'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"';'", "':'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Include", "If", "Else", "For", "While", "Do", "Continue", "Break", 
		"Return", "Const", "Struct", "Char", "Short", "Int", "Long", "Float", 
		"Double", "Void", "IncludeLiteral", "Identifier", "CharLiteral", "StringLiteral", 
		"IntLiteral", "FloatLiteral", "Access", "AccessPointer", "Address", "Assign", 
		"AssignAdd", "AssignSubtract", "AssignMultiply", "AssignDivide", "AssignModulo", 
		"Add", "Subtract", "Multiply", "Divide", "Modulo", "Equal", "NotEqual", 
		"Less", "LessOrEqual", "Greater", "GreaterOrEqual", "And", "Or", "Not", 
		"LeftRound", "RightRound", "LeftSquare", "RightSquare", "LeftCurly", "RightCurly", 
		"Semicolon", "Colon", "Comma", "Whitespace", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStatementContext[] includeStatement() {
			return GetRuleContexts<IncludeStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStatementContext includeStatement(int i) {
			return GetRuleContext<IncludeStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1571842L) != 0)) {
				{
				State = 24;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Include:
					{
					State = 22;
					includeStatement();
					}
					break;
				case Const:
				case Struct:
				case Char:
				case Short:
				case Int:
				case Long:
				case Float:
				case Double:
				case Void:
				case Identifier:
					{
					State = 23;
					declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(CGrammarParser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncludeLiteral() { return GetToken(CGrammarParser.IncludeLiteral, 0); }
		public IncludeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterIncludeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitIncludeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeStatementContext includeStatement() {
		IncludeStatementContext _localctx = new IncludeStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_includeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(Include);
			State = 32;
			Match(IncludeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				functionDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				structDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				variableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CGrammarParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CGrammarParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRound() { return GetToken(CGrammarParser.LeftRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRound() { return GetToken(CGrammarParser.RightRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CGrammarParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CGrammarParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CGrammarParser.Comma, i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			type(0);
			State = 40;
			Match(Identifier);
			State = 41;
			Match(LeftRound);
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1570816L) != 0)) {
				{
				State = 42;
				type(0);
				State = 43;
				Match(Identifier);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 44;
					Match(Comma);
					State = 45;
					type(0);
					State = 46;
					Match(Identifier);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 55;
			Match(RightRound);
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Semicolon:
				{
				State = 56;
				Match(Semicolon);
				}
				break;
			case If:
			case For:
			case While:
			case Do:
			case Continue:
			case Break:
			case Return:
			case Identifier:
			case CharLiteral:
			case StringLiteral:
			case IntLiteral:
			case FloatLiteral:
			case Address:
			case Add:
			case Subtract:
			case Multiply:
			case Not:
			case LeftRound:
			case LeftCurly:
				{
				State = 57;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CGrammarParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CGrammarParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CGrammarParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurly() { return GetToken(CGrammarParser.LeftCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurly() { return GetToken(CGrammarParser.RightCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(Struct);
			State = 61;
			Match(Identifier);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftCurly) {
				{
				State = 62;
				Match(LeftCurly);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1571840L) != 0)) {
					{
					State = 65;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 63;
						variableDeclaration();
						}
						break;
					case 2:
						{
						State = 64;
						structDeclaration();
						}
						break;
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 70;
				Match(RightCurly);
				}
			}

			State = 73;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CGrammarParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CGrammarParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CGrammarParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignOperatorContext assignOperator() {
			return GetRuleContext<AssignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 75;
				Match(Const);
				}
			}

			State = 78;
			type(0);
			State = 79;
			Match(Identifier);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) {
				{
				State = 80;
				assignOperator();
				State = 81;
				expression(0);
				}
			}

			State = 85;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurly() { return GetToken(CGrammarParser.LeftCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurly() { return GetToken(CGrammarParser.RightCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CGrammarParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRound() { return GetToken(CGrammarParser.LeftRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRound() { return GetToken(CGrammarParser.RightRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CGrammarParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CGrammarParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CGrammarParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(CGrammarParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(CGrammarParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CGrammarParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CGrammarParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CGrammarParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CGrammarParser.Return, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftCurly:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(LeftCurly);
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4925932518768628L) != 0)) {
					{
					State = 91;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						State = 88;
						variableDeclaration();
						}
						break;
					case 2:
						{
						State = 89;
						structDeclaration();
						}
						break;
					case 3:
						{
						State = 90;
						statement();
						}
						break;
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 96;
				Match(RightCurly);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				Match(If);
				State = 98;
				Match(LeftRound);
				State = 99;
				expression(0);
				State = 100;
				Match(RightRound);
				State = 101;
				statement();
				State = 104;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 102;
					Match(Else);
					State = 103;
					statement();
					}
					break;
				}
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				Match(While);
				State = 107;
				Match(LeftRound);
				State = 108;
				expression(0);
				State = 109;
				Match(RightRound);
				State = 110;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				Match(Do);
				State = 113;
				statement();
				State = 114;
				Match(While);
				State = 115;
				Match(LeftRound);
				State = 116;
				expression(0);
				State = 117;
				Match(RightRound);
				State = 118;
				Match(Semicolon);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 5);
				{
				State = 120;
				Match(For);
				State = 121;
				Match(LeftRound);
				State = 127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422332890873856L) != 0)) {
						{
						State = 122;
						expression(0);
						}
					}

					State = 125;
					Match(Semicolon);
					}
					break;
				case 2:
					{
					State = 126;
					variableDeclaration();
					}
					break;
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422332890873856L) != 0)) {
					{
					State = 129;
					expression(0);
					}
				}

				State = 132;
				Match(Semicolon);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422332890873856L) != 0)) {
					{
					State = 133;
					expression(0);
					}
				}

				State = 136;
				Match(RightRound);
				State = 137;
				statement();
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 6);
				{
				State = 138;
				Match(Break);
				State = 139;
				Match(Semicolon);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 7);
				{
				State = 140;
				Match(Continue);
				State = 141;
				Match(Semicolon);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 8);
				{
				State = 142;
				Match(Return);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422332890873856L) != 0)) {
					{
					State = 143;
					expression(0);
					}
				}

				State = 146;
				Match(Semicolon);
				}
				break;
			case Identifier:
			case CharLiteral:
			case StringLiteral:
			case IntLiteral:
			case FloatLiteral:
			case Address:
			case Add:
			case Subtract:
			case Multiply:
			case Not:
			case LeftRound:
				EnterOuterAlt(_localctx, 9);
				{
				State = 147;
				expression(0);
				State = 148;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRound() { return GetToken(CGrammarParser.LeftRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRound() { return GetToken(CGrammarParser.RightRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Address() { return GetToken(CGrammarParser.Address, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(CGrammarParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(CGrammarParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CGrammarParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOperatorContext assignOperator() {
			return GetRuleContext<AssignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharLiteral() { return GetToken(CGrammarParser.CharLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CGrammarParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(CGrammarParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(CGrammarParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(CGrammarParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(CGrammarParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(CGrammarParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CGrammarParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOrEqual() { return GetToken(CGrammarParser.LessOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CGrammarParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(CGrammarParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(CGrammarParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(CGrammarParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CGrammarParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CGrammarParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CGrammarParser.Comma, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 153;
				Match(LeftRound);
				State = 154;
				expression(0);
				State = 155;
				Match(RightRound);
				}
				break;
			case 2:
				{
				State = 157;
				lvalue(0);
				State = 158;
				Match(LeftRound);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422332890873856L) != 0)) {
					{
					State = 159;
					expression(0);
					}
				}

				State = 162;
				Match(RightRound);
				}
				break;
			case 3:
				{
				State = 164;
				Match(Address);
				State = 165;
				lvalue(0);
				}
				break;
			case 4:
				{
				State = 166;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 140789027962880L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 167;
				expression(15);
				}
				break;
			case 5:
				{
				State = 168;
				Match(LeftRound);
				State = 169;
				type(0);
				State = 170;
				Match(RightRound);
				State = 171;
				expression(14);
				}
				break;
			case 6:
				{
				State = 173;
				lvalue(0);
				State = 174;
				assignOperator();
				State = 175;
				expression(7);
				}
				break;
			case 7:
				{
				State = 177;
				Match(CharLiteral);
				}
				break;
			case 8:
				{
				State = 178;
				Match(StringLiteral);
				}
				break;
			case 9:
				{
				State = 179;
				Match(IntLiteral);
				}
				break;
			case 10:
				{
				State = 180;
				Match(FloatLiteral);
				}
				break;
			case 11:
				{
				State = 181;
				lvalue(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 184;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 185;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 481036337152L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 186;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 188;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Subtract) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 189;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 191;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833280L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 192;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 194;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 195;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 196;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 197;
						Match(And);
						State = 198;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 200;
						Match(Or);
						State = 201;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 202;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 203;
						Match(Comma);
						State = 204;
						expression(7);
						}
						break;
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRound() { return GetToken(CGrammarParser.LeftRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRound() { return GetToken(CGrammarParser.RightRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(CGrammarParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CGrammarParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access() { return GetToken(CGrammarParser.Access, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AccessPointer() { return GetToken(CGrammarParser.AccessPointer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquare() { return GetToken(CGrammarParser.LeftSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquare() { return GetToken(CGrammarParser.RightSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(CGrammarParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(CGrammarParser.Subtract, 0); }
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterLvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitLvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		return lvalue(0);
	}

	private LvalueContext lvalue(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LvalueContext _localctx = new LvalueContext(Context, _parentState);
		LvalueContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_lvalue, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftRound:
				{
				State = 211;
				Match(LeftRound);
				State = 212;
				lvalue(0);
				State = 213;
				Match(RightRound);
				}
				break;
			case Multiply:
				{
				State = 215;
				Match(Multiply);
				State = 216;
				lvalue(3);
				}
				break;
			case Identifier:
				{
				State = 217;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 231;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new LvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 220;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 221;
						_la = TokenStream.LA(1);
						if ( !(_la==Access || _la==AccessPointer) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 222;
						Match(Identifier);
						}
						break;
					case 2:
						{
						_localctx = new LvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 223;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 224;
						Match(LeftSquare);
						State = 225;
						expression(0);
						State = 226;
						Match(RightSquare);
						}
						break;
					case 3:
						{
						_localctx = new LvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 228;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 229;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Subtract) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 230;
						expression(0);
						}
						break;
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CGrammarParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CGrammarParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CGrammarParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CGrammarParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CGrammarParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CGrammarParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CGrammarParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CGrammarParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CGrammarParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(CGrammarParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquare() { return GetToken(CGrammarParser.LeftSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(CGrammarParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquare() { return GetToken(CGrammarParser.RightSquare, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Struct:
				{
				State = 237;
				Match(Struct);
				State = 238;
				Match(Identifier);
				}
				break;
			case Char:
				{
				State = 239;
				Match(Char);
				}
				break;
			case Short:
				{
				State = 240;
				Match(Short);
				}
				break;
			case Int:
				{
				State = 241;
				Match(Int);
				}
				break;
			case Long:
				{
				State = 242;
				Match(Long);
				}
				break;
			case Float:
				{
				State = 243;
				Match(Float);
				}
				break;
			case Double:
				{
				State = 244;
				Match(Double);
				}
				break;
			case Void:
				{
				State = 245;
				Match(Void);
				}
				break;
			case Identifier:
				{
				State = 246;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 255;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 249;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 250;
						Match(Multiply);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 251;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 252;
						Match(LeftSquare);
						State = 253;
						Match(IntLiteral);
						State = 254;
						Match(RightSquare);
						}
						break;
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CGrammarParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignAdd() { return GetToken(CGrammarParser.AssignAdd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignSubtract() { return GetToken(CGrammarParser.AssignSubtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignMultiply() { return GetToken(CGrammarParser.AssignMultiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignDivide() { return GetToken(CGrammarParser.AssignDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignModulo() { return GetToken(CGrammarParser.AssignModulo, 0); }
		public AssignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.EnterAssignOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICGrammarListener typedListener = listener as ICGrammarListener;
			if (typedListener != null) typedListener.ExitAssignOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICGrammarVisitor<TResult> typedVisitor = visitor as ICGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperatorContext assignOperator() {
		AssignOperatorContext _localctx = new AssignOperatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 8: return lvalue_sempred((LvalueContext)_localctx, predIndex);
		case 9: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 6);
		}
		return true;
	}
	private bool lvalue_sempred(LvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 11);
		case 11: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,263,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,5,0,25,8,0,10,0,12,0,28,9,0,1,0,
		1,0,1,1,1,1,1,1,1,2,1,2,1,2,3,2,38,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,5,3,49,8,3,10,3,12,3,52,9,3,3,3,54,8,3,1,3,1,3,1,3,3,3,59,8,3,1,4,
		1,4,1,4,1,4,1,4,5,4,66,8,4,10,4,12,4,69,9,4,1,4,3,4,72,8,4,1,4,1,4,1,5,
		3,5,77,8,5,1,5,1,5,1,5,1,5,1,5,3,5,84,8,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,
		92,8,6,10,6,12,6,95,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,105,8,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
		124,8,6,1,6,1,6,3,6,128,8,6,1,6,3,6,131,8,6,1,6,1,6,3,6,135,8,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,145,8,6,1,6,1,6,1,6,1,6,3,6,151,8,6,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,161,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,183,8,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,5,7,206,8,7,10,7,12,7,209,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
		8,219,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,232,8,8,10,8,
		12,8,235,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,248,8,9,1,
		9,1,9,1,9,1,9,1,9,1,9,5,9,256,8,9,10,9,12,9,259,9,9,1,10,1,10,1,10,0,3,
		14,16,18,11,0,2,4,6,8,10,12,14,16,18,20,0,7,2,0,34,35,47,47,1,0,36,38,
		1,0,34,35,1,0,41,44,1,0,39,40,1,0,25,26,1,0,28,33,313,0,26,1,0,0,0,2,31,
		1,0,0,0,4,37,1,0,0,0,6,39,1,0,0,0,8,60,1,0,0,0,10,76,1,0,0,0,12,150,1,
		0,0,0,14,182,1,0,0,0,16,218,1,0,0,0,18,247,1,0,0,0,20,260,1,0,0,0,22,25,
		3,2,1,0,23,25,3,4,2,0,24,22,1,0,0,0,24,23,1,0,0,0,25,28,1,0,0,0,26,24,
		1,0,0,0,26,27,1,0,0,0,27,29,1,0,0,0,28,26,1,0,0,0,29,30,5,0,0,1,30,1,1,
		0,0,0,31,32,5,1,0,0,32,33,5,19,0,0,33,3,1,0,0,0,34,38,3,6,3,0,35,38,3,
		8,4,0,36,38,3,10,5,0,37,34,1,0,0,0,37,35,1,0,0,0,37,36,1,0,0,0,38,5,1,
		0,0,0,39,40,3,18,9,0,40,41,5,20,0,0,41,53,5,48,0,0,42,43,3,18,9,0,43,50,
		5,20,0,0,44,45,5,56,0,0,45,46,3,18,9,0,46,47,5,20,0,0,47,49,1,0,0,0,48,
		44,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,54,1,0,0,0,52,
		50,1,0,0,0,53,42,1,0,0,0,53,54,1,0,0,0,54,55,1,0,0,0,55,58,5,49,0,0,56,
		59,5,54,0,0,57,59,3,12,6,0,58,56,1,0,0,0,58,57,1,0,0,0,59,7,1,0,0,0,60,
		61,5,11,0,0,61,71,5,20,0,0,62,67,5,52,0,0,63,66,3,10,5,0,64,66,3,8,4,0,
		65,63,1,0,0,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,
		68,70,1,0,0,0,69,67,1,0,0,0,70,72,5,53,0,0,71,62,1,0,0,0,71,72,1,0,0,0,
		72,73,1,0,0,0,73,74,5,54,0,0,74,9,1,0,0,0,75,77,5,10,0,0,76,75,1,0,0,0,
		76,77,1,0,0,0,77,78,1,0,0,0,78,79,3,18,9,0,79,83,5,20,0,0,80,81,3,20,10,
		0,81,82,3,14,7,0,82,84,1,0,0,0,83,80,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,
		0,85,86,5,54,0,0,86,11,1,0,0,0,87,93,5,52,0,0,88,92,3,10,5,0,89,92,3,8,
		4,0,90,92,3,12,6,0,91,88,1,0,0,0,91,89,1,0,0,0,91,90,1,0,0,0,92,95,1,0,
		0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,151,5,53,
		0,0,97,98,5,2,0,0,98,99,5,48,0,0,99,100,3,14,7,0,100,101,5,49,0,0,101,
		104,3,12,6,0,102,103,5,3,0,0,103,105,3,12,6,0,104,102,1,0,0,0,104,105,
		1,0,0,0,105,151,1,0,0,0,106,107,5,5,0,0,107,108,5,48,0,0,108,109,3,14,
		7,0,109,110,5,49,0,0,110,111,3,12,6,0,111,151,1,0,0,0,112,113,5,6,0,0,
		113,114,3,12,6,0,114,115,5,5,0,0,115,116,5,48,0,0,116,117,3,14,7,0,117,
		118,5,49,0,0,118,119,5,54,0,0,119,151,1,0,0,0,120,121,5,4,0,0,121,127,
		5,48,0,0,122,124,3,14,7,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,
		0,0,125,128,5,54,0,0,126,128,3,10,5,0,127,123,1,0,0,0,127,126,1,0,0,0,
		128,130,1,0,0,0,129,131,3,14,7,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,
		1,0,0,0,132,134,5,54,0,0,133,135,3,14,7,0,134,133,1,0,0,0,134,135,1,0,
		0,0,135,136,1,0,0,0,136,137,5,49,0,0,137,151,3,12,6,0,138,139,5,8,0,0,
		139,151,5,54,0,0,140,141,5,7,0,0,141,151,5,54,0,0,142,144,5,9,0,0,143,
		145,3,14,7,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,151,5,
		54,0,0,147,148,3,14,7,0,148,149,5,54,0,0,149,151,1,0,0,0,150,87,1,0,0,
		0,150,97,1,0,0,0,150,106,1,0,0,0,150,112,1,0,0,0,150,120,1,0,0,0,150,138,
		1,0,0,0,150,140,1,0,0,0,150,142,1,0,0,0,150,147,1,0,0,0,151,13,1,0,0,0,
		152,153,6,7,-1,0,153,154,5,48,0,0,154,155,3,14,7,0,155,156,5,49,0,0,156,
		183,1,0,0,0,157,158,3,16,8,0,158,160,5,48,0,0,159,161,3,14,7,0,160,159,
		1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,49,0,0,163,183,1,0,0,
		0,164,165,5,27,0,0,165,183,3,16,8,0,166,167,7,0,0,0,167,183,3,14,7,15,
		168,169,5,48,0,0,169,170,3,18,9,0,170,171,5,49,0,0,171,172,3,14,7,14,172,
		183,1,0,0,0,173,174,3,16,8,0,174,175,3,20,10,0,175,176,3,14,7,7,176,183,
		1,0,0,0,177,183,5,21,0,0,178,183,5,22,0,0,179,183,5,23,0,0,180,183,5,24,
		0,0,181,183,3,16,8,0,182,152,1,0,0,0,182,157,1,0,0,0,182,164,1,0,0,0,182,
		166,1,0,0,0,182,168,1,0,0,0,182,173,1,0,0,0,182,177,1,0,0,0,182,178,1,
		0,0,0,182,179,1,0,0,0,182,180,1,0,0,0,182,181,1,0,0,0,183,207,1,0,0,0,
		184,185,10,13,0,0,185,186,7,1,0,0,186,206,3,14,7,14,187,188,10,12,0,0,
		188,189,7,2,0,0,189,206,3,14,7,13,190,191,10,11,0,0,191,192,7,3,0,0,192,
		206,3,14,7,12,193,194,10,10,0,0,194,195,7,4,0,0,195,206,3,14,7,11,196,
		197,10,9,0,0,197,198,5,45,0,0,198,206,3,14,7,10,199,200,10,8,0,0,200,201,
		5,46,0,0,201,206,3,14,7,9,202,203,10,6,0,0,203,204,5,56,0,0,204,206,3,
		14,7,7,205,184,1,0,0,0,205,187,1,0,0,0,205,190,1,0,0,0,205,193,1,0,0,0,
		205,196,1,0,0,0,205,199,1,0,0,0,205,202,1,0,0,0,206,209,1,0,0,0,207,205,
		1,0,0,0,207,208,1,0,0,0,208,15,1,0,0,0,209,207,1,0,0,0,210,211,6,8,-1,
		0,211,212,5,48,0,0,212,213,3,16,8,0,213,214,5,49,0,0,214,219,1,0,0,0,215,
		216,5,36,0,0,216,219,3,16,8,3,217,219,5,20,0,0,218,210,1,0,0,0,218,215,
		1,0,0,0,218,217,1,0,0,0,219,233,1,0,0,0,220,221,10,5,0,0,221,222,7,5,0,
		0,222,232,5,20,0,0,223,224,10,4,0,0,224,225,5,50,0,0,225,226,3,14,7,0,
		226,227,5,51,0,0,227,232,1,0,0,0,228,229,10,2,0,0,229,230,7,2,0,0,230,
		232,3,14,7,0,231,220,1,0,0,0,231,223,1,0,0,0,231,228,1,0,0,0,232,235,1,
		0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,17,1,0,0,0,235,233,1,0,0,0,236,
		237,6,9,-1,0,237,238,5,11,0,0,238,248,5,20,0,0,239,248,5,12,0,0,240,248,
		5,13,0,0,241,248,5,14,0,0,242,248,5,15,0,0,243,248,5,16,0,0,244,248,5,
		17,0,0,245,248,5,18,0,0,246,248,5,20,0,0,247,236,1,0,0,0,247,239,1,0,0,
		0,247,240,1,0,0,0,247,241,1,0,0,0,247,242,1,0,0,0,247,243,1,0,0,0,247,
		244,1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,257,1,0,0,0,249,250,10,
		11,0,0,250,256,5,36,0,0,251,252,10,10,0,0,252,253,5,50,0,0,253,254,5,23,
		0,0,254,256,5,51,0,0,255,249,1,0,0,0,255,251,1,0,0,0,256,259,1,0,0,0,257,
		255,1,0,0,0,257,258,1,0,0,0,258,19,1,0,0,0,259,257,1,0,0,0,260,261,7,6,
		0,0,261,21,1,0,0,0,30,24,26,37,50,53,58,65,67,71,76,83,91,93,104,123,127,
		130,134,144,150,160,182,205,207,218,231,233,247,255,257
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
